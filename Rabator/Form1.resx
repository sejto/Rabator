<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACMuAAAjLgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAREREAEhISPg8PD/UPDw//Dw8P/hMTE2AODg4AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABUVFQAWFhYgERER2A8PD/8QEBDrFRUVORMTEwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJycnAICAgAAVFRVNERERpxQUFGIhISEEHR0dAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQUFBADMzMwAmJiYCOzs7AEFB
        QQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////////////////////////4A/gH8AP4B/gD/A//4
        /wOD8P4DAPD+AwAB/gGAAfwB/AP8Af4H/AH+D/gA/g/4AP8ECAD/AAH//wAB//+AA///wO///+B////w
        f///8H////B////4f////f////////////8=
</value>
  </data>
</root>